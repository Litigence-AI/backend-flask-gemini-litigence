import firebase_admin
from firebase_admin import credentials, firestore
from datetime import datetime
from firebase_admin import firestore
from datetime import datetime


# Initialize Firebase
def initialize_firebase():
    try:
        # Check if already initialized
        firebase_admin.get_app()
    except ValueError:
        # Initialize with service account
        cred = credentials.Certificate('litigence-ai-firebase-adminsdk-fbsvc-d1986c607b.json')
        
        #cred, check if  its imported
        print('cred')
        print(cred)

        # Replace 'path/to/serviceAccountKey.json' with the actual path where you stored the downloaded file
        firebase_admin.initialize_app(cred)



def save_chat_to_firestore(user_id, chat_title, user_message, ai_response):
    """
    Save a chat exchange (user message and AI response) to Firestore.
    
    Args:
        user_id (str): The ID of the user
        chat_title (str): The title of the chat session
        user_message (str): The message sent by the user
        ai_response (str): The response generated by the AI
    
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        db = firestore.client()
        current_timestamp = datetime.now()
        
        # Create message objects
        user_message_data = {
            'role': 'user',
            'message': user_message,
            'timestamp': current_timestamp
        }
        
        ai_message_data = {
            'role': 'ai',
            'message': ai_response,
            'timestamp': current_timestamp
        }
        
        # Reference to chat document
        chat_ref = db.collection('user_data').document(user_id) \
                     .collection('user_chats').document(chat_title)
        
        # Update in transaction
        transaction = db.transaction()
        
        @firestore.transactional
        def update_in_transaction(transaction, doc_ref):
            doc = doc_ref.get(transaction=transaction)
            
            if doc.exists:
                transaction.update(doc_ref, {
                    'messages': firestore.ArrayUnion([user_message_data, ai_message_data]),
                    'last_updated': current_timestamp
                })
            else:
                transaction.set(doc_ref, {
                    'title': chat_title,
                    'createdAt': current_timestamp,
                    'last_updated': current_timestamp,
                    'messages': [user_message_data, ai_message_data]
                })
        
        update_in_transaction(transaction, chat_ref)
        return True
    except Exception as e:
        print(f"Error saving chat to Firestore: {e}")
        return False
